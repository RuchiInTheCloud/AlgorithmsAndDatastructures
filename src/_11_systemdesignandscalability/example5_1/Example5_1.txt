100 machines to respond to search queries
which call out another cluster to get the result using processSearch(query)
machine which responds to a given query is chosen at random
processSearch is expensive
Design caching mechanism to cache the results of the most recent queries
Be sure to update cache when data changes

Expand to many machines
-----------------------------------------------------------------------------------------
- Each machine has its own cache
If a query is sent twice to the same machine. The result of the second request is taken from the cache
If a query is sent to two separate machines, it would be treated as a fresh query each time.

+ Quick since no machine to machine calls
- Less effective cache since repeat queries are treated as fresh queries
---------------------------------------------------------------------------------------------
- Each machine has a copy of the cache
When new items added to the cache they are added to all machines

+ Common queries resolved by cache
- Updating cache means firing off data to N different machines
- Since each items is saved N times, cache holds much less data
---------------------------------------------------------------------------------------------
- Each machine has a segment of the cache
A machine holds part of the cache. If machine i receives a query, it looks for results in machine j = hash(query) % N.
Machine j returns result from cache or from processSearch call.

- More machine to machine call
-----------------------------------------------------------------------------------------------

Updating results when contents change
- Some popular queries may be permanently cached.
- Mechanism needed to refresh these entries periodically or on demand
- When do results change:
-- The content at a URL changes (or page at URL is removed)
-- The ordering of results changes in response to a result change
-- New pages appear related to a query

To handle situation 1 and 2, we create a hastable with URL -> cached query. Separate cache residing in several machine... <-- data intensive
If instant refresh not required crawl through cache and purge queries tied to updated URL

Situation 3 difficult. Purge single word queries when parsing content at a new URL.
Implement automatic timeout. No query regardless of popularity can reside in cache for more than x minutes.
- Separate timeout for every URL, based on how frequently it is updated. Timeout of query is the smallest timeouts of each URL.
- Implement timeout based on topic. News updated more frequently.